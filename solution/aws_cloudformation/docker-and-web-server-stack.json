{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Template ECSInstanceWithSecurityGroup: Create an Amazon ECS instance running the Amazon ECS-Optimized Amazon Linux AMI. Creates an EC2 security group for the instance to give you SSH access. ",

  "Parameters" : {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
	  "Default": "ECSInstanceKey2",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "InstanceType" : {
      "Description" : "Amazon ECS-Optimized Amazon Linux",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro", "t2.small","t2.medium","t2.large","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium","m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge","c3.2xlarge","c3.4xlarge","c3.8xlarge","g2.2xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge","i2.2xlarge","i2.4xlarge","i2.8xlarge"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
   }
  },

  "Resources" : {

    "ECSInstance" : {
      "Type" : "AWS::EC2::Instance",
    
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : "ami-af0a6dd8",
        "IamInstanceProfile": "ecsInstanceRole",
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "docker pull alexpamet/nodejs1\n",
		  "docker run -d -p 8081:8081 alexpamet/nodejs1\n"

        ] ] } }
      }
    },

    "WebServer" : {
      "Type" : "AWS::EC2::Instance",
	  
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
			
          "configSets" : {
            "InstallAndRun" : [ "Install" ]
          },
			
          "Install" : {
            "packages" : {
              "yum" : {
                "nginx"        : []
              }
            },
			  
            "files" : {
				"/etc/nginx/nginx.conf" : {
					"content" : { "Fn::Join" : [ "", [
					

						"user  nginx;\n",
						"worker_processes  auto;\n",
						"\n",
						"error_log  /var/log/nginx/error.log;\n",
						"pid        /var/run/nginx.pid;\n",
						"events {\n",
						"    worker_connections 1024;\n",
						"}\n",
						"http {\n",
						"    include         /etc/nginx/mime.types;\n",
						"    default_type    application/octet-stream;\n",
						"    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n",
						"    access_log  /var/log/nginx/access.log  main;\n",
						"\n",
						"    sendfile            on;\n",
						"    tcp_nopush          on;\n",
						"    tcp_nodelay         on;\n",
						"    keepalive_timeout   65;\n",
						"    types_hash_max_size 2048;\n",
						"    include /etc/nginx/conf.d/*.conf;\n",
						"    index   index.html index.htm;\n",
						"    server {\n",
						"        listen       80;\n",
						"        server_name  localhost;\n",
						"        root         /usr/share/nginx/html;\n",
"location /server1/ {\n",
"proxy_pass http://",{ "Fn::GetAtt" : [ "ECSInstance", "PrivateIp" ] },":8081;\n",
"proxy_set_header Host $host;\n",
"proxy_set_header X-Real-IP $remote_addr;\n",
"proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n",
"}\n",
"\n",
"location /server2/ {\n",
"proxy_pass http://",{ "Fn::GetAtt" : [ "ECSInstance", "PrivateIp" ] },":8082;\n",
"proxy_set_header Host $host;\n",
"proxy_set_header X-Real-IP $remote_addr;\n",
"proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n",
"}\n",
"\n",
"location / {\n",
"}\n",
"error_page 404 /404.html;\n",
"location = /40x.html {\n",
"}\n",
"error_page 500 502 503 504 /50x.html;\n",
"location = /50x.html {\n",
"}\n",
"}\n",
"}\n"
]]},
"mode"  : "000600",
"owner" : "root",
"group" : "root"
				}
			},
			
            "services" : {
              "sysvinit" : {  
                "nginx"    : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
			
		  }
        }
      },
	  
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : "ami-bff32ccc",
		"IamInstanceProfile": "ecsInstanceRole",
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
             "yum update -y aws-cfn-bootstrap\n",

             "# Install the files and packages from the metadata\n",
             "/opt/aws/bin/cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource WebServer ",
             "         --configsets InstallAndRun ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

		  

          "echo ", { "Fn::GetAtt" : [ "ECSInstance", "PrivateIp" ] }

        ] ] } }
      }
    },
	
    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : { "Ref" : "SSHLocation"}
        } ]
      }
    }

  },

  "Outputs" : {
    "InstanceId" : {
      "Description" : "InstanceId of the newly created EC2 instance",
      "Value" : { "Ref" : "ECSInstance" }
    },
    "AZ" : {
      "Description" : "Availability Zone of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "ECSInstance", "AvailabilityZone" ] }
    },
    "PublicDNS" : {
      "Description" : "Public DNSName of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "ECSInstance", "PublicDnsName" ] }
    },
    "PublicIP" : {
      "Description" : "Public IP address of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "ECSInstance", "PublicIp" ] }
    }
  }
}
